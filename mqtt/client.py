import paho.mqtt.client as mqtt
import json
import time
import traceback
from flask import current_app
from config import load_config
from datetime import datetime

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
# (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º)
devices = {}

def on_connect(client, userdata, flags, rc):
    """–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if rc == 0:
        print("‚úÖ Connected to MQTT broker, subscribing to wsm/#")
        client.subscribe("wsm/#")
    else:
        print(f"‚ùå Failed to connect, return code {rc}")

def on_message(client, userdata, msg):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö MQTT-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    from app import app  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from db.utils import (
        get_or_create_device, update_device_last_seen, save_device_state,
        save_device_settings, save_device_config, save_ack_message, 
        save_display_info, save_payment, save_sale, save_collection,
        get_monobank_api_key
    )

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    with app.app_context():
        topic = msg.topic
        try:
            payload = json.loads(msg.payload.decode("utf-8"))
        except json.JSONDecodeError:
            current_app.logger.warning(f"‚ö†Ô∏è JSON Decode Error: {msg.payload}")
            return

        print(f"üì• Received message: {topic} ‚Üí {payload}")

        if topic.startswith("wsm/"):
            parts = topic.split("/")
            if len(parts) < 3:
                return

            device_id = parts[1]

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                update_device_last_seen(device_id)

                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                if device_id not in devices:
                    devices[device_id] = {
                        "settings": {}, 
                        "config": {}, 
                        "state": {}, 
                        "reboot_ack": None,
                        "setting_ack": None,
                        "config_ack": None,
                        "payment_ack": None,
                        "action_ack": None,
                        "display": None,
                        "denomination": [], 
                        "monobank_api_key": load_config().monobank.api_key, 
                        "monobank_payments": []
                    }

                request_id = payload.get("request_id", 234)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                if topic.endswith("/server/state/info"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_device_state(device_id, payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["state"] = payload
                    print(f"üÜï State updated for {device_id}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                elif topic.endswith("/server/setting"):
                    payload["request_id"] = request_id
                    payload["received_at"] = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_device_settings(device_id, payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["settings"] = payload
                    print(f"‚öôÔ∏è Settings received for {device_id}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                elif topic.endswith("/server/config"):
                    payload["request_id"] = request_id
                    payload["received_at"] = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º API-–∫–ª—é—á Monobank, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ë–î
                    api_key = get_monobank_api_key(device_id)
                    if api_key:
                        payload["monobank_api_key"] = api_key
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_device_config(device_id, payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["config"] = payload
                    print(f"üîß Config received for {device_id}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                elif topic.endswith("/server/setting/ack"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_ack_message(device_id, "setting", payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["setting_ack"] = payload
                    print(f"‚öôÔ∏è Settings ACK received for {device_id}: {payload}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                elif topic.endswith("/server/config/ack"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_ack_message(device_id, "config", payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["config_ack"] = payload
                    print(f"üîß Config ACK received for {device_id}: {payload}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                elif topic.endswith("/server/reboot/ack"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_ack_message(device_id, "reboot", payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["reboot_ack"] = payload
                    print(f"üîÑ Reboot ACK received for {device_id}")
                    request_device_settings(device_id)
                    request_device_config(device_id)
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–µ–º–∞ –¥–µ–Ω–µ–≥
                elif topic.endswith("/server/denomination/info"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –ø–ª–∞—Ç–µ–∂
                    payment_type = None
                    if payload.get("billValue"):
                        payment_type = "bill"
                        amount = payload.get("billValue")
                    elif payload.get("coinValue"):
                        payment_type = "coin"
                        amount = payload.get("coinValue")
                        
                    if payment_type:
                        save_payment(device_id, payment_type, amount, status='confirmed', confirmed_at=datetime.utcnow())
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    if "denomination" not in devices[device_id]:
                        devices[device_id]["denomination"] = []
                    devices[device_id]["denomination"].append(payload)
                    print(f"üí∞ Denomination received for {device_id}: {payload}")
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –¥–∏—Å–ø–ª–µ—è
                elif topic.endswith("/server/display"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_display_info(device_id, payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["display"] = payload
                    print(f"üì∫ Display info received for {device_id}: {payload}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                elif topic.endswith("/server/payment/ack"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_ack_message(device_id, "payment", payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["payment_ack"] = payload
                    print(f"üí∞ Payment ACK received for {device_id}: {payload}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Monobank
                    if payload.get("code") == 0:
                        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç ACK —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º
                        # —á–µ—Ä–µ–∑ order_id –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                        
                        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–∫–∂–µ –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                        if "monobank_payments" in devices[device_id]:
                            pending_payments = [p for p in devices[device_id]["monobank_payments"] 
                                                if p.get("status") == "pending"]
                            if pending_payments:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                                pending_payments[0]["status"] = "confirmed"
                                pending_payments[0]["confirmed_at"] = time.time()
                                print(f"üí∞ Monobank payment confirmed for {device_id}: {pending_payments[0]}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
                elif topic.endswith("/server/action/ack"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    save_ack_message(device_id, "action", payload)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    devices[device_id]["action_ack"] = payload
                    print(f"üîÑ Action ACK received for {device_id}: {payload}")
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–∂–µ
                elif topic.endswith("/server/sale/set"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ –ë–î
                    sale = save_sale(device_id, payload)
                    print(f"üíµ Sale received for {device_id}: {payload}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
                    send_sale_ack(device_id, sale.external_id)
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
                elif topic.endswith("/server/incass/set"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é –≤ –ë–î
                    collection = save_collection(device_id, payload)
                    print(f"üí∞ Collection received for {device_id}: {payload}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
                    send_collection_ack(device_id, collection.external_id)

            except Exception as e:
                current_app.logger.error(f"Error processing MQTT message: {e}")
                current_app.logger.error(traceback.format_exc())

def request_device_settings(device_id):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/setting/get"
        payload = json.dumps({"request_id": 234, "fields": []})
        print(f"üì§ Requesting settings for {device_id}...")
        client.publish(topic, payload)

def request_device_config(device_id):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/config/get"
        payload = json.dumps({"request_id": 234, "fields": []})
        print(f"üì§ Requesting config for {device_id}...")
        client.publish(topic, payload)

def update_device_settings(device_id, new_settings):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if device_id in devices and "settings" in devices[device_id]:
        topic = f"wsm/{device_id}/client/setting/set"
        
        # –ó–∞–º–µ–Ω–∞ None –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        for key in new_settings:
            if new_settings[key] is None:
                new_settings[key] = 0
                
        new_settings["request_id"] = devices[device_id]["settings"].get("request_id", 234)
        payload = json.dumps(new_settings)
        print(f"üì§ Sending updated settings to {device_id}: {new_settings}")
        client.publish(topic, payload)

def update_device_config(device_id, new_config):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    from db.utils import update_monobank_api_key

    if device_id in devices and "config" in devices[device_id]:
        topic = f"wsm/{device_id}/client/config/set"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API-–∫–ª—é—á Monobank –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if "monobank_api_key" in new_config:
            update_monobank_api_key(device_id, new_config["monobank_api_key"])
            # –£–¥–∞–ª—è–µ–º API-–∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            del new_config["monobank_api_key"]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for key in ['bill_table', 'coin_table']:
            if key in new_config and isinstance(new_config[key], str):
                try:
                    new_config[key] = [int(x.strip()) for x in new_config[key].split(',') if x.strip()]
                except ValueError:
                    print(f"‚ö†Ô∏è Error converting {key} to array, using empty array")
                    new_config[key] = []
                    
        # –ó–∞–º–µ–Ω–∞ None –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for key in new_config:
            if new_config[key] is None:
                if key in ['broker_port', 'OTA_port', 'timeZone', 'coinPulsePrice']:
                    new_config[key] = 0
                elif key in ['broker_uri', 'OTA_server', 'wifi_STA_ssid', 'wifi_STA_pass', 'ntp_server', 'broker_user', 'broker_pass']:
                    new_config[key] = ""
        
        new_config["request_id"] = devices[device_id]["config"].get("request_id", 234)
        payload = json.dumps(new_config)
        print(f"üì§ Sending updated config to {device_id}: {new_config}")
        client.publish(topic, payload)

import json
from db.utils import get_sale, mark_sale_ack_sent
from flask import current_app

def send_sale_ack(device_id, sale_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    if device_id not in devices:
        current_app.logger.error(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏")
        return False

    topic = f"wsm/{device_id}/client/sale/ack"
    payload = json.dumps({
        "id": sale_id,
        "code": 0  # 0 - —É—Å–ø–µ—à–Ω–æ
    })

    print(f"üì§ Sending sale ACK to {device_id} for sale ID {sale_id}")

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MQTT
        result = client.publish(topic, payload)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if result.rc != 0:
            current_app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ACK –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {sale_id} (–∫–æ–¥ {result.rc})")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥–∞–∂–∞ –≤ –ë–î
        sale = get_sale(device_id, sale_id)
        if not sale:
            current_app.logger.error(f"‚ö†Ô∏è –ü—Ä–æ–¥–∞–∂–∞ {sale_id} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return False

        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –≤ –ë–î
        mark_sale_ack_sent(sale.id)
        print(f"‚úÖ Sale ACK sent successfully for {sale_id}")

        return True

    except Exception as e:
        current_app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ {sale_id}: {e}")
        return False

def send_collection_ack(device_id, collection_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"""
    from db.utils import get_collection, mark_collection_ack_sent

    if device_id in devices:
        topic = f"wsm/{device_id}/client/incass/ack"
        payload = json.dumps({
            "id": collection_id,
            "code": 0  # 0 - —É—Å–ø–µ—à–Ω–æ
        })
        print(f"üì§ Sending collection ACK to {device_id} for collection ID {collection_id}")
        result = client.publish(topic, payload)
        
        if result.rc == 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            collection = get_collection(device_id, collection_id)
            if collection:
                mark_collection_ack_sent(collection.id)
            print(f"‚úÖ Collection ACK sent successfully")
            return True
        else:
            print(f"‚ùå Collection ACK publish failed with code {result.rc}")
            return False

def send_reboot_command(device_id, delay):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/reboot/set"
        payload = json.dumps({"request_id": 234, "delay": delay})
        print(f"üì§ Sending reboot command to {device_id} with delay {delay}")
        client.publish(topic, payload)

def get_device_state(device_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    return devices.get(device_id, {}).get("state", {})

def request_display_info(device_id):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –¥–∏—Å–ø–ª–µ—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/display/get"
        payload = json.dumps({"request_id": 234, "fields": ["line_1", "line_2"]})
        print(f"üì§ Requesting display info for {device_id}...")
        client.publish(topic, payload)

def send_qrcode_payment(device_id, order_id, amount):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–ª–∞—Ç—ã QR-–∫–æ–¥–æ–º –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/payment/set"
        payload = {
            "request_id": 234,
            "addQRcode": {
                "order_id": order_id,
                "amount": amount
            }
        }
        
        mqtt_payload = json.dumps(payload)
        print(f"üì§ Sending QR code payment to {device_id}: {amount} kopecks, order_id: {order_id}")
        print(f"üì¶ Full payload: {mqtt_payload}")
        
        result = client.publish(topic, mqtt_payload)
        if result.rc == 0:
            print(f"‚úÖ MQTT message sent successfully")
            return True
        else:
            print(f"‚ùå MQTT publish failed with code {result.rc}")
            return False

def send_free_payment(device_id, amount):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/payment/set"
        payload = json.dumps({
            "request_id": 234,
            "addFree": {
                "amount": amount
            }
        })
        print(f"üì§ Sending free payment to {device_id}: {amount} kopecks")
        client.publish(topic, payload)

def clear_payment(device_id, clear_options=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω—É–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    if device_id in devices:
        if clear_options is None:
            clear_options = {
                "CoinClear": True,
                "BillClear": True,
                "PrevClear": True,
                "FreeClear": True,
                "QRcodeClear": True,
                "PayPassClear": True
            }
        
        topic = f"wsm/{device_id}/client/payment/set"
        payload = json.dumps({
            "request_id": 234,
            **clear_options
        })
        print(f"üì§ Clearing payment for {device_id}")
        client.publish(topic, payload)

def send_action_command(device_id, pour=None, blocking=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏—è (–ø—Ä–æ–ª–∏–≤ –≤–æ–¥—ã/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/action/set"
        payload = {"request_id": 234}
        
        if pour in ["Start", "Stop"]:
            payload["Pour"] = pour
            
        if blocking is not None:
            payload["Blocking"] = blocking
            
        print(f"üì§ Sending action command to {device_id}: {payload}")
        client.publish(topic, json.dumps(payload))

def get_monobank_payments_history(device_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π Monobank."""
    if device_id in devices:
        return devices[device_id].get("monobank_payments", [])
    return []

config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT-–∫–ª–∏–µ–Ω—Ç–∞
client = mqtt.Client()
client.username_pw_set(config.mqtt.username, config.mqtt.password)
client.on_connect = on_connect
client.on_message = on_message

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É
try:
    client.connect(config.mqtt.broker, config.mqtt.port, 60)
    client.loop_start()
    print(f"üîå Connecting to MQTT broker {config.mqtt.broker}:{config.mqtt.port}")
except Exception as e:
    print(f"‚ùå Failed to connect to MQTT broker: {e}")